diff --git a/README.rst b/README.rst
index e6f2e60..b3634c5 100644
--- a/README.rst
+++ b/README.rst
@@ -66,3 +66,18 @@ the client using the client's ``defaults`` constructor option.
 .. note::
 
     You can omit the token and token_secret options to use two-legged OAuth.
+
+Using the RSA-SH1 signature method
+==================================
+
+.. code-block:: php
+
+    use GuzzleHttp\Subscriber\Oauth\Oauth1;
+
+    $oauth = new Oauth1([
+        'consumer_key'    => 'my_key',
+        'consumer_secret' => 'my_secret',
+        'private_key_file' => 'my_path_to_private_key_file',
+        'private_key_passphrase' => 'my_passphrase',
+        'signature_method' => Oauth1::SIGNATURE_METHOD_RSA,
+    ]);
diff --git a/src/Oauth1.php b/src/Oauth1.php
index 504be40..b8ccbf9 100644
--- a/src/Oauth1.php
+++ b/src/Oauth1.php
@@ -48,6 +48,8 @@ class Oauth1 implements SubscriberInterface
      * - callback: OAuth callback
      * - consumer_key: Consumer key string. Defaults to "anonymous".
      * - consumer_secret: Consumer secret. Defaults to "anonymous".
+     * - private_key_file: The location of your private key file (RSA-SHA1 signature method only)
+     * - private_key_passphrase: The passphrase for your private key file (RSA-SHA1 signature method only)
      * - token: Client token
      * - token_secret: Client secret token
      * - verifier: OAuth verifier.
@@ -141,16 +143,22 @@ class Oauth1 implements SubscriberInterface
         );
 
         // Implements double-dispatch to sign requests
-        $meth = [$this, 'sign_' . str_replace(
-            '-', '_', $this->config['signature_method']
-        )];
-
-        if (!is_callable($meth)) {
-            throw new \RuntimeException('Unknown signature method: '
-                . $this->config['signature_method']);
+        switch ($this->config['signature_method']) {
+            case Oauth1::SIGNATURE_METHOD_HMAC:
+                $signature = $this->signUsingHmacSha1($baseString);
+                break;
+            case Oauth1::SIGNATURE_METHOD_RSA:
+                $signature = $this->signUsingRsaSha1($baseString);
+                break;
+            case Oauth1::SIGNATURE_METHOD_PLAINTEXT:
+                $signature = $this->signUsingPlaintext($baseString);
+                break;
+            default:
+                throw new \RuntimeException('Unknown signature method: ' . $this->config['signature_method']);
+                break;
         }
 
-        return base64_encode(call_user_func($meth, $baseString, $this->config));
+        return base64_encode($signature);
     }
 
     /**
@@ -215,7 +223,12 @@ class Oauth1 implements SubscriberInterface
         return $data;
     }
 
-    private function sign_HMAC_SHA1($baseString)
+    /**
+     * @param string $baseString
+     *
+     * @return string
+     */
+    private function signUsingHmacSha1($baseString)
     {
         $key = rawurlencode($this->config['consumer_secret'])
             . '&' . rawurlencode($this->config['token_secret']);
@@ -223,7 +236,12 @@ class Oauth1 implements SubscriberInterface
         return hash_hmac('sha1', $baseString, $key, true);
     }
 
-    private function sign_RSA_SHA1($baseString)
+    /**
+     * @param string $baseString
+     *
+     * @return string
+     */
+    private function signUsingRsaSha1($baseString)
     {
         if (!function_exists('openssl_pkey_get_private')) {
             throw new \RuntimeException('RSA-SHA1 signature method '
@@ -231,18 +249,23 @@ class Oauth1 implements SubscriberInterface
         }
 
         $privateKey = openssl_pkey_get_private(
-            file_get_contents($this->config['consumer_secret']),
-            $this->config['consumer_secret']
+            file_get_contents($this->config['private_key_file']),
+            $this->config['private_key_passphrase']
         );
 
-        $signature = false;
+        $signature = '';
         openssl_sign($baseString, $signature, $privateKey);
         openssl_free_key($privateKey);
 
         return $signature;
     }
 
-    private function sign_PLAINTEXT($baseString)
+    /**
+     * @param string $baseString
+     *
+     * @return string
+     */
+    private function signUsingPlaintext($baseString)
     {
         return $baseString;
     }
diff --git a/tests/Oauth1Test.php b/tests/Oauth1Test.php
index 064608f..6c73a0f 100644
--- a/tests/Oauth1Test.php
+++ b/tests/Oauth1Test.php
@@ -9,6 +9,7 @@ use GuzzleHttp\Exception\ClientException;
 use GuzzleHttp\Message\Request;
 use GuzzleHttp\Post\PostBody;
 use GuzzleHttp\Subscriber\Oauth\Oauth1;
+use GuzzleHttp\Stream\Utils;
 
 class Oauth1Test extends \PHPUnit_Framework_TestCase
 {
@@ -267,7 +268,7 @@ class Oauth1Test extends \PHPUnit_Framework_TestCase
                 'stream' => true
             ]);
             $body = $response->getBody();
-            $data = $body::readLine($body);
+            $data = Utils::readLine($body);
             $this->assertContains('bieber', strtolower($data));
             $this->assertNotEmpty(json_decode($data, true));
             $body->close();
